C. Data Structure Hierarchy
time limit per test1 second
memory limit per test256 megabytes
You are asked to implement a custom data structure hierarchy for managing a collection of integers. The hierarchy consists of abstract and non-abstract classes, each with specific functionality.

DataStructure (Abstract class): This class serves as the base class for all data structures in the hierarchy. It defines a set of common operations that any data structure should support, such as inserting elements, removing elements, and searching for elements. By defining these operations as pure virtual functions, the DataStructure
 class establishes a common interface that derived classes must implement. Provides pure virtual functions for common operations such as insert()
, remove()
, and search()
.

SequentialDataStructure (Abstract class): This class inherits from DataStructure
 and introduces functionality specific to sequential data structures. Sequential data structures are those where elements are stored in a specific order, such as lists or arrays. By inheriting from DataStructure
, SequentialDataStructure
 inherits the common interface defined in the base class. It further extends this interface by adding pure virtual functions for operations specific to sequential structures, such as pushing elements to the back or front of the structure, pushBack()
, pushFront()
 and popping elements from the back or front popBack()
, and popFront()
.

DynamicDataStructure (Abstract class): Similar to SequentialDataStructure
, this class inherits from DataStructure
 and introduces functionality specific to dynamic data structures. Dynamic data structures are those that can change in size during program execution, such as resizable arrays or linked lists. By inheriting from DataStructure
, DynamicDataStructure
 also inherits the common interface defined in the base class. It further extends this interface by adding pure virtual functions for operations specific to dynamic structures, such as resizing the structure resize()
 and clearing its contents clear()
.

List (Non-abstract Class): This class represents an implementation of a list data structure that combines characteristics of both sequential and dynamic structures. By inheriting from both SequentialDataStructure
 and DynamicDataStructure
, the List
 class inherits and implements the common interface defined in both abstract classes. This allows the List
 class to support a wide range of operations, including those common to all data structures (defined in DataStructure
), as well as operations specific to sequential and dynamic structures (defined in SequentialDataStructure
 and DynamicDataStructure
, respectively).

Your task is to implement the List
 class according to the provided hierarchy and functionality. This class will keep integers. You can use std::vector
 for your implementation. It is allowed to perform the remove
 operation over an empty list, the list remains unchanged. Here are some function signatures. This excludes specifiers such as virtual
, const
 or override
 which will be needed during your implementation:

void insert(int x)
void remove()
bool search(int x)
void pushBack(int x)
void pushFront(int x)
void popBack()
void popFront()
void resize(int new_size)
void clear()
Standard input and output have to be used. You are guaranteed to have described valid input format.

Input
Standard input consists of several lines. The first line will contain n
 operations to be carried out, followed by n
 lines of the next 3 types of operations:

insert x
: Insert integer x
 at the end of the list.
remove
: Remove the last integer from the list.
search x
: Check if integer x
 is present in the list.
Constraints:

Number of operations: 1≤n≤50
insert
, search
 values: 1≤x≤100
Output
Standard output should contain m+1
 lines, where m
 is the number of search
 operation applications in inputs. For each search
 operation, the output "YES" should be provided if the integer is present in the list, otherwise, the output should contain "NO". At the last line, the full content of the list should be printed. No explicit output is required for insert
 and remove
 operations.

Examples
InputСкопировать
43
search 89
insert 31
insert 7
insert 38
search 66
search 21
insert 35
insert 93
insert 8
insert 71
search 66
remove
insert 45
search 61
insert 80
remove
search 19
insert 63
insert 67
search 36
insert 78
insert 41
remove
insert 34
search 39
remove
insert 32
search 39
search 67
search 30
remove
search 63
insert 93
insert 76
remove
search 38
search 3
insert 94
remove
insert 26
search 30
remove
insert 69
OutputСкопировать
NO
NO
NO
NO
NO
NO
NO
NO
NO
YES
NO
YES
YES
NO
NO
31 7 38 35 93 8 45 63 67 78 93 69 
InputСкопировать
4
insert 65
search 90
insert 82
insert 50
OutputСкопировать
NO
65 82 50 
